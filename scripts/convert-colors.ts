import fs from 'node:fs'
import path from 'path'

const cssContent = fs.readFileSync('./global.css', 'utf8')

const rootVariablesRegex = /:root\s*{[^}]*}/
const darkRootVariablesRegex = /.dark:root\s*{[^}]*}/

const rootMatch = cssContent.match(rootVariablesRegex)
const darkRootMatch = cssContent.match(darkRootVariablesRegex)

const parseVariables = (block: string) => {
  const variables: Record<string, any> = {}
  block
    .slice(block.indexOf('{') + 1, block.indexOf('}'))
    .split(';')
    .forEach((prop) => {
      const [key, value] = prop.split(':').map((part) => part.trim())
      if (key && value) {
        variables[key] = value
      }
    })
  return variables
}

function convertCssVariableName(key: string) {
  let newKey = key.replace(/^--/, '')

  newKey = newKey.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase())

  return newKey
}

const hslRegex = /^([\d.]+) ([\d.]+)% ([\d.]+)%$/

function isHSLValue(value: string) {
  return hslRegex.test(value)
}

const formatForReactNative = (variables: Record<string, string>) => {
  return Object.entries(variables)
    .map(([key, value]) => {
      if (isHSLValue(value))
        return `  ${convertCssVariableName(key)}: 'hsl(${value})',`
      else return `  ${convertCssVariableName(key)}: '${value}',`
    })
    .join('\n')
}

const rootVariables = parseVariables(rootMatch![0])
const darkRootVariables = parseVariables(darkRootMatch![0])

const colorTsContent = `
// bun run generate:color-token  Generated by script from global.css

export const LIGHT_COLORS = {${formatForReactNative(rootVariables)}} as const
export const DARK_COLORS = {${formatForReactNative(darkRootVariables)}} as const
`

const tsFilePath = path.join('./', 'constant', 'color.ts')
fs.writeFileSync(tsFilePath, colorTsContent, 'utf8')

console.log('React Native color constants have been saved to constant/color.ts')
